<!DOCTYPE html>
<html>

<head>
    <link rel="stylesheet" href="editorstyle.css">
    <script>
        const exports = {}
    </script>
    <script src="../ImageConversion/RenderMode/black-white.js"></script>
    <meta charset="UTF-8">
</head>

<body>
    <p id="canvas" class="scalecheck" style="font-size: 5px;">.</p>
    <script>
        //Saving
        function download(filename, text) {
            var element = document.createElement('a');
            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
            element.setAttribute('download', filename);

            element.style.display = 'none';
            document.body.appendChild(element);

            element.click();

            document.body.removeChild(element);
        }

        //Size management

        const screenwidth = screen.width
        const screenheight = screen.height

        const canvas = document.getElementById("canvas")
        const sizerect = canvas.getBoundingClientRect()

        const charwidth = sizerect.width
        const charheight = sizerect.height * 1.25

        const charsx = Math.floor(screenwidth / charwidth)
        const charsy = Math.floor(screenheight / charheight) - 1

        const pixelsx = charsx + 1
        const pixelsy = charsy + 1

        const rendersize = [pixelsx, pixelsy, pixelsx, pixelsy]

        const body = document.body

        //Storage
        const localstorage = window.localStorage
        localstorage.clear()

        var pixeldata = localstorage.getItem("PixelData")
        if (pixeldata) {
            pixeldata = JSON.parse(pixeldata)
        } else {
            pixeldata = []
            for (var i = 0; i < (pixelsx) * (pixelsy) * 4; i++) {
                pixeldata[i] = 0
            }
        }

        var HoveredPos = [0, 0]
        var BrushColor = 255
        var OppositeColor = 0

        //Brush
        //First val is x second val is y
        //[0, 0, 1, 0] <= [[0, 0][1, 0]]
        var brushdata = [-1, 1, -1, 0, -1, -1, 0, 1, 0, 0, 0, -1, 1, 1, 1, 0, 1, -1]

        const YCompression = sizerect.height / charwidth
        var BrushSize = 10

        var mousedown = false
        var lasthoveredareavalue = []
        for (var i = 0; i < brushdata.length / 2; i++) {
            lasthoveredareavalue[i] = 0
        }

        function EraseBrushTrace() {
            for (var i = 0; i < lasthoveredareavalue.length; i++) {
                const bx = brushdata[i * 2]
                const by = brushdata[i * 2 + 1]
                if (lasthoveredareavalue[i] == OppositeColor && isvalidpos(bx + HoveredPos[0], by + HoveredPos[1])) {
                    colorpixel(getIndex(bx + HoveredPos[0], by + HoveredPos[1]) * 4, OppositeColor)
                }
            }
        }

        function UpdateBrush(skipnormalize) {
            if (!skipnormalize) {
                EraseBrushTrace();
            }

            brushdata = []
            for (var x = -BrushSize; x <= BrushSize; x++) {
                for (var y = -BrushSize; y <= BrushSize; y++) {
                    if (Math.sqrt(x * x + y * y) <= BrushSize) {
                        brushdata.push(x)
                        brushdata.push(Math.floor(y / YCompression))
                    }
                }
            }

            lasthoveredareavalue = []

            for (var i = 0; i < brushdata.length / 2; i++) {
                const bx = brushdata[i * 2]
                const by = brushdata[i * 2 + 1]
                if (isvalidpos(bx + HoveredPos[0], by + HoveredPos[1])) {
                    const index = getIndex(bx + HoveredPos[0], by + HoveredPos[1]) * 4
                    lasthoveredareavalue[i] = pixeldata[index]
                    colorpixel(index, BrushColor)
                }
            }
        }

        UpdateBrush()

        //Pixel Functions
        function pixelget(x, y) {
            return [x, pixelsy - 1 - y]
        }

        function getHoveredCharacter(x, y) {
            return [Math.floor((x + charwidth / 2) / charwidth) + 0, Math.floor((y + sizerect.height / 2) / sizerect.height) + 0]
        }

        function getHoveredCharacterIndex(x, y) {
            return Math.floor((x + charwidth / 2) / charwidth) + Math.floor((y + sizerect.height / 2) / sizerect.height) * pixelsx
        }

        function getIndex(x, y) {
            return y * pixelsx + x
        }

        function colorpixel(index, value) {
            pixeldata[index] = value
            pixeldata[index + 1] = value
            pixeldata[index + 2] = value
            pixeldata[index + 3] = value
        }

        //Rendering 

        function onmousemove(event) {
            const lastpos = HoveredPos
            const lastindex = getIndex(lastpos[0], lastpos[1])

            MouseX = event.clientX
            MouseY = event.clientY

            HoveredPos = getHoveredCharacter(MouseX, MouseY)

            if (lastindex != getIndex(HoveredPos[0], HoveredPos[1])) {
                refreshcursor(lastpos)
            }
        }

        function isvalidpos(x, y) {
            return x >= 0 && x < pixelsx && y >= 0 && y < pixelsy
        }

        function refreshcursor(lastpos) {
            lastpos = lastpos || HoveredPos
            for (var i = 0; i < lasthoveredareavalue.length; i++) {
                const bx = brushdata[i * 2]
                const by = brushdata[i * 2 + 1]
                if (lasthoveredareavalue[i] == OppositeColor && isvalidpos(bx + lastpos[0], by + lastpos[1])) {
                    colorpixel(getIndex(bx + lastpos[0], by + lastpos[1]) * 4, OppositeColor)
                }
            }

            for (var i = 0; i < lasthoveredareavalue.length; i++) {
                const bx = brushdata[i * 2]
                const by = brushdata[i * 2 + 1]
                if (isvalidpos(bx + HoveredPos[0], by + HoveredPos[1])) {
                    const index = getIndex(bx + HoveredPos[0], by + HoveredPos[1]) * 4
                    if (mousedown)
                        colorpixel(index, BrushColor)
                    lasthoveredareavalue[i] = pixeldata[index]
                    colorpixel(index, BrushColor)
                }
            }

            update()
        }

        function update() {
            canvas.innerHTML = exports.render(pixelget, null, pixeldata, rendersize).replaceAll("\n", "<br>")
        }

        body.onmousedown = function () {
            mousedown = true
            refreshcursor(HoveredPos)
        }

        body.onmouseup = function () {
            mousedown = false
        }

        window.onbeforeunload = function () {
            localstorage.setItem("PixelData", JSON.stringify(pixeldata))
        }

        body.onkeydown = function (event) {
            const key = event.key

            if (key == "s") {
                //Getting rid of the brush
                const currentbrushsize = BrushSize
                BrushSize = -1
                UpdateBrush()
                refreshcursor();
                download("image.txt", canvas.innerHTML.replaceAll("<br>", "\n"))

                //Putting back the brush
                BrushSize = currentbrushsize
                UpdateBrush()
                refreshcursor();
            } else if (key == "c") {
                for (var i = 0; i < pixeldata.length; i++) {
                    pixeldata[i] = 0
                }
                localstorage.setItem("PixelData", JSON.stringify(pixeldata))
                update()
            } else if (key == "+" || key == "=") {
                BrushSize++;
                UpdateBrush();
                refreshcursor()
            } else if (key == "-" || key == "_") {
                BrushSize--;
                UpdateBrush();
                refreshcursor();
            } else if (key == "e") {
                EraseBrushTrace();

                if (BrushColor == 255) {
                    OppositeColor = 255;
                    BrushColor = 0;
                } else {
                    OppositeColor = 0;
                    BrushColor = 255;
                }
                UpdateBrush(true);
                refreshcursor()
            }
        }

        canvas.style.whiteSpace = "pre"
        body.onmousemove = onmousemove

        update()
    </script>
</body>

</html>