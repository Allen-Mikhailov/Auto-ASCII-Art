<!DOCTYPE html>
<html>

<head>
    <link rel="stylesheet" href="editorstyle.css">
    <script>
    const exports = {}
    </script>
    <script src="../ImageConversion/RenderMode/black-white.js"></script>
    <meta charset="UTF-8">
</head>

<body>
    <p id="canvas" class="scalecheck" style="font-size: 14px;">.</p>
    <script>
        //Size management

        const screenwidth = screen.width
        const screenheight = screen.height
        
        const canvas = document.getElementById("canvas")
        const sizerect = canvas.getBoundingClientRect()

        const charwidth = sizerect.width
        const charheight = sizerect.height*1.25

        const charsx = Math.floor(screenwidth/charwidth)
        const charsy = Math.floor(screenheight/charheight)-1

        const pixelsx = charsx+1
        const pixelsy = charsy+1

        const rendersize = [pixelsx, pixelsy, pixelsx, pixelsy]

        //Brush
        //First val is x second val is y
        //[0, 0, 1, 0] <= [[0, 0][1, 0]]
        var brushdata = [-1, 1, -1, 0, -1, -1, 0, 1, 0, 0, 0, -1, 1, 1, 1, 0, 1, -1]

        //Rendering 

        const localstorage = window.localStorage

        var pixeldata = localstorage.getItem("PixelData")
        if (pixeldata)
        {
            
        } else {
            pixeldata = []
            for (var i = 0; i < (pixelsx)*(pixelsy)*4; i++)
            {
                pixeldata[i] = 0
            }
        }

        function pixelget(x, y)
        {
            return [x, pixelsy-1-y]
        }

        var HoveredPos = [0, 0]

        function getHoveredCharacter(x, y) {
            return [Math.floor((x+charwidth/2)/charwidth), Math.floor((y+sizerect.height/2)/sizerect.height)]
        }

        function getHoveredCharacterIndex(x, y)
        {
            return Math.floor((x+charwidth/2)/charwidth) + Math.floor((y+sizerect.height/2)/sizerect.height)*pixelsx
        }

        function getIndex(x, y)
        {
            return y*pixelsx + x
        }

        function colorpixel(index, value)
        {
            pixeldata[index] = value
            pixeldata[index+1] = value
            pixeldata[index+2] = value
            pixeldata[index+3] = value
        }

        const body = document.body

        var mousedown = false
        var lasthoveredareavalue = []
        for (var i = 0; i < brushdata.length/2; i++)
        {
            lasthoveredareavalue[i] = 0   
        }

        function onmousemove(event)
        {
            const lastpos = HoveredPos
            const lastindex = getIndex(lastpos[0], lastpos[1])
            
            MouseX = event.clientX
            MouseY = event.clientY

            HoveredPos = getHoveredCharacter(MouseX, MouseY)

            if (lastindex != getIndex(HoveredPos[0], HoveredPos[1]))
            {
                refreshcursor(lastpos)
            }
        }

        function isvalidpos(x, y)
        {
            return x > 0 && x < pixelsx && y > 0 && y < pixelsy
        }

        function refreshcursor(lastpos)
        {
            for (var i = 0; i < lasthoveredareavalue.length; i++)
            {
                const bx = brushdata[i*2]
                const by = brushdata[i*2+1]
                if (lasthoveredareavalue[i] == 0 && isvalidpos(bx+lastpos[0], by+lastpos[1]))
                {
                    colorpixel(getIndex(bx+lastpos[0], by+lastpos[1])*4, 0)
                }  
            }

            for (var i = 0; i < lasthoveredareavalue.length; i++)
            {
                const bx = brushdata[i*2]
                const by = brushdata[i*2+1]
                if (isvalidpos(bx+HoveredPos[0], by+HoveredPos[1]))
                {
                    const index = getIndex(bx+HoveredPos[0], by+HoveredPos[1])*4
                    if (mousedown)
                        colorpixel(index, 255)
                    lasthoveredareavalue[i] = pixeldata[index]
                    colorpixel(index, 255)
                }
            }

            update()
        }

        function update()
        {
            canvas.innerHTML = exports.render(pixelget, null, pixeldata, rendersize).replaceAll("\n", "<br>")

            localstorage.setItem("PixelData", pixeldata)
        }

        body.onmousedown = function()
        {
            mousedown = true
        }

        body.onmouseup = function()
        {
            mousedown = false
        }

        body.onkeydown = function(event)
        {
            const key = event.key
        }

        canvas.style.whiteSpace = "pre"
        body.onmousemove = onmousemove
    </script>
</body>

</html>