<!DOCTYPE html>
<html>

<head>
    <link rel="stylesheet" href="editorstyle.css">
    <script>
    const exports = {}
    </script>
    <script src="../ImageConversion/RenderMode/black-white.js"></script>
</head>

<body>
    <p id="canvas" class="scalecheck" style="font-size: 14px;">.</p>
    <script>
        //Size management

        const screenwidth = screen.width
        const screenheight = screen.height
        
        const canvas = document.getElementById("canvas")
        const sizerect = canvas.getBoundingClientRect()

        const charwidth = sizerect.width
        const charheight = sizerect.height*1.25

        const charsx = Math.floor(screenwidth/charwidth)
        const charsy = Math.floor(screenheight/charheight)-1

        const pixelsx = charsx+1
        const pixelsy = charsy+1

        const rendersize = [pixelsx, pixelsy, pixelsx, pixelsy]

        //Brush
        //First val is x second val is y
        //[0, 0, 1, 0] <= [[0, 0][1, 0]]
        var brushdata = [-1, 1, -1, 0, -1, 1, 0, 1, 0, 0, 0, -1, 1, 1, 1, 0, 1, -1]

        //Rendering 

        const pixeldata = []
        for (var i = 0; i < (pixelsx)*(pixelsy)*4; i++)
        {
            pixeldata[i] = 0
        }

        function pixelget(x, y)
        {
            return [x, pixelsy-1-y]
        }

        var HoveredPos

        function getHoveredCharacter(x, y) {
            return [Math.floor((x+charwidth/2)/charwidth), Math.floor((y+sizerect.height/2)/sizerect.height)]
        }

        function getHoveredCharacterIndex(x, y)
        {
            return Math.floor((x+charwidth/2)/charwidth) + Math.floor((y+sizerect.height/2)/sizerect.height)*pixelsx
        }

        function getIndex(x, y)
        {
            return y*pixelsx + x
        }

        function colorpixel(index, value)
        {
            pixeldata[index] = value
            pixeldata[index+1] = value
            pixeldata[index+2] = value
            pixeldata[index+3] = value
        }

        const body = document.body

        var mousedown = false
        var lasthoveredareavalue = []
        for (var i = 0; i < brushdata.length/2; i++)
        {
            lasthoveredareavalue[i] = 0   
        }

        function onmousemove(event)
        {
            const lastindex = getHoveredCharacter(MouseX, MouseY)

            MouseX = event.clientX
            MouseY = event.clientY

            const currentindex = getHoveredCharacter(MouseX, MouseY)

            if (lastindex != currentindex)
            {
                refreshcursor(lastindex)
            }
        }

        function refreshcursor(lastindex)
        {
            const currentindex = getHoveredCharacter(MouseX, MouseY)
            for (var i = 0; i < lasthoveredareavalue.length; i++)
            {
                if (lasthoveredareavalue[i] == 0)
                {
                    
                }  
            }
        }

        function update()
        {
            canvas.innerHTML = bottomstr+exports.render(pixelget, null, pixeldata, rendersize).replaceAll("\n", "<br>")
            const lastselected = calculateSelectedCharacter()

            const lastselectedindex = (lastselected[0]+lastselected[1]*pixelsx)*4

            MouseX = event.clientX
            MouseY = event.clientY

            const currentselected = calculateSelectedCharacter()

            const selectedindex = (currentselected[0]+currentselected[1]*pixelsx)*4

            if (lastselectedindex != selectedindex)
            {
                if (LastSelectedValue == 0)
                    colorpixel(lastselectedindex, 0)

                if (mousedown)
                    colorpixel(selectedindex, 255)
                LastSelectedValue = pixeldata[selectedindex]
                colorpixel(selectedindex, 255)

                
            }
        }

        body.onmousedown = function()
        {
            mousedown = true
        }

        body.onmouseup = function()
        {
            mousedown = false
        }

        body.onkeydown = function(event)
        {
            const key = event.key
        }

        canvas.style.whiteSpace = "pre"
        body.onmousemove = mousemove
    </script>
</body>

</html>