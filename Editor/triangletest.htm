<!DOCTYPE html>
<html>

<head>
    <link rel="stylesheet" href="editorstyle.css">
    <script>
        const exports = {}
    </script>
    <script src="../ImageConversion/RenderMode/black-white.js"></script>
    <meta charset="UTF-8">
</head>

<body>
    <p id="canvas" class="scalecheck" style="font-size: 5px;">.</p>
    <script>
        //Size management

        const screenwidth = screen.width
        const screenheight = screen.height

        const canvas = document.getElementById("canvas")
        const sizerect = canvas.getBoundingClientRect()

        const charwidth = sizerect.width
        const charheight = sizerect.height * 1.25

        const charsx = Math.floor(screenwidth / charwidth)
        const charsy = Math.floor(screenheight / charheight) - 1

        const pixelsx = charsx + 1
        const pixelsy = charsy + 1

        const rendersize = [pixelsx, pixelsy, pixelsx, pixelsy]

        const body = document.body

        pixeldata = []
        for (var i = 0; i < (pixelsx) * (pixelsy) * 4; i++) {
            pixeldata[i] = 0
        }

        var HoveredPos = [0, 0]

        const YCompression = sizerect.height / charwidth

        var mousedown = false

        //Pixel Functions
        function pixelget(x, y) {
            return [x, pixelsy - 1 - y]
        }

        function getHoveredCharacter(x, y) {
            return [Math.floor((x + charwidth / 2) / charwidth) + 0, Math.floor((y + sizerect.height / 2) / sizerect.height) + 0]
        }

        function getHoveredCharacterIndex(x, y) {
            return Math.floor((x + charwidth / 2) / charwidth) + Math.floor((y + sizerect.height / 2) / sizerect.height) * pixelsx
        }

        function getIndex(x, y) {
            return y * pixelsx + x
        }

        function colorpixel(index, value) {
            pixeldata[index] = value
            pixeldata[index + 1] = value
            pixeldata[index + 2] = value
            pixeldata[index + 3] = value
        }

        //Rendering
        function isvalidpos(x, y) {
            return x >= 0 && x < pixelsx && y >= 0 && y < pixelsy
        }

        function update() {
            canvas.innerHTML = exports.render(pixelget, null, pixeldata, rendersize).replaceAll("\n", "<br>")
        }

        function rendertriangle(p1, p2, p3)
        {
            const up = Math.max(p1[1], p2[1], p3[1])
            const down = Math.min(p1[1], p2[1], p3[1])
            const right = Math.max(p1[0], p2[0], p3[0])
            const left = Math.in(p1[0], p2[0], p3[0])

            //line is slope, yintercept
            const slope1 = []

            function inbounds(x, y)
            {
                return y <= up && y >= down && x <= right && x >= left
            }

            for (var x = 0; x < pixelsx; x++)
            {
                for (var y = 0; y < pixelsy; y++)
                {
                    if (!inbounds(x, y))
                        return
                    
                    
                }
            }
        }

        function onmousemove(event) {

            MouseX = event.clientX
            MouseY = event.clientY

            HoveredPos = getHoveredCharacter(MouseX, MouseY)
        }

        body.onmousedown = function () {
            mousedown = true

        }

        body.onmouseup = function () {
            mousedown = false
        }

        canvas.style.whiteSpace = "pre"
        body.onmousemove = onmousemove

        update()
    </script>
</body>

</html>